#!/usr/bin/env python3
#-*- coding: UTF-8 -*-


import logging
import argparse
import re
import subprocess
# noinspection PyUnresolvedReferences
from subprocess import Popen, PIPE
import requests
from pathlib import Path


def get_cli_args():
    parser = argparse.ArgumentParser(description="Check the health of the host via CM API")

    parser.add_argument(
        "--host", required=True, help="Hostnames must be in the format *.foo.bar. For multiple hostnames use comma-separated values"
    )
    parser.add_argument(
        "--dc", required=True, help="Cloudera Manager DC. Either sj/ch"
    )
    parser.add_argument(
        "--user", required=True, help="Cloudera Manager username"
    )
    parser.add_argument(
        "--secret", required=True, help="Cloudera Manager Password"
    )
    parser.add_argument(
        "--lsguser", required=True, help="Enter the username which will be used to login to LSG"
    )
    parser.add_argument(
        "--lsgname", required=True, help="Enter the LSG name which will be used for running Sanity checks on production machines"
    )

    return parser.parse_args()


class sanityCheck:
    def __init__(self, datacenter, username, secret, host_array, lsguser, lsgname):
        self.dc = datacenter
        self.cm_dns = "csi.akadns.net"
        self.cm_api_ver = "v19"
        self.cm_port = "7180"
        self.user = username
        self.passwd = secret
        self.lsguser = lsguser
        self.lsgname = lsgname
        self.host_array = host_array
        self.host_ip = []
        self.hosts_url = ""
        self.json_data = {}
        self.cluster_json_data = {}
        self.roles_json_data = {}
        self.host_existence = []
        self.host_existence_ID = []
        self.role_hostname = []
        self.host_Id = []
        self.endor_host_ID = []
        self.endor_hostname = []
        self.endor_ip = []
        self.la_host_ID = []
        self.la_hostname = []
        self.la_ip = []
        self.other_INT_host_ID = []
        self.other_INT_hostname = []
        self.other_INT_ip = []
        self.other_MR_host_ID = []
        self.other_MR_hostname = []
        self.other_MR_ip = []
        self.nm_host_ID = []
        self.nm_hostname = []
        self.nm_ip = []


    def dc_map(self):
        """
        Generate DC_URL according to the inputs
        """
        if self.dc == "sj":
            dc_alias = "sj"
            self.hosts_url = "http://cm-{}.{}:{}/api/{}".format((str(dc_alias)), str(self.cm_dns), str(self.cm_port),
                                                                str(self.cm_api_ver))
        if self.dc == "ch":
            dc_alias = "chicago"
            self.hosts_url = "http://cm-{}.{}:{}/api/{}".format((str(dc_alias)), str(self.cm_dns), str(self.cm_port),
                                                                str(self.cm_api_ver))
        self.gen_json_data()

    def gen_json_data(self):
        """
        Fetches the basic JSON data regarding the host
        """
        req_hosts_url = requests.get((self.hosts_url + "/hosts/"), auth=(self.user, self.passwd))
        self.json_data = req_hosts_url.json()['items']
        for i in range(len(self.host_array)):
            for j in range(len(self.json_data)):
                if self.host_array[i] in self.json_data[j]['hostname']:
                    if self.host_array[i] not in self.host_existence:
                        self.host_existence.append(self.host_array[i])
                        self.host_existence_ID.append(self.json_data[j]['hostId'])
                    j += 1
            i += 1
        for i in range(len(self.host_array)):
            if self.host_array[i] not in self.host_existence:
                print('\n' + '\033[1m' + "**Warning: Wrong DC/Host " + '"' + str(self.host_array[i]) + '"' + " doesn't exist in Cloudera Manager " + str(self.dc) + ". Check the other DC. " + '\033[0m')
            i += 1
        self.h2ip()


    def h2ip(self):
        """
        Converts the parsed hostnames to external_IP
        """
        for hosts in self.host_existence:
            try:
                s_str = str(hosts).replace("-", ".", 3).replace(".csi.foo.bar", "", 1).replace("a10.", "", 1)
                cmd2 = "config_cmd=" + "'" + "(iptool csi | grep -w " + '"' + str(s_str) + '"' + ")'" + " ; config_output=$(echo ${config_cmd} | ssh -T -o '"'StrictHostKeyChecking=no'"'  " + '"' + str(self.lsguser) + "@" + str(self.lsgname) + '"' + "); echo "'"$config_output"'" "
                host_exec = subprocess.Popen(cmd2, shell=True, stdout=subprocess.PIPE, universal_newlines=True)
                for ip in host_exec.stdout:
                    pattern = re.compile(r'(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})')
                    result = pattern.search(ip).group(0)
                    self.host_ip.append(result)
            except AttributeError:
                print("Invalid host")
                exit()
        self.host_summary()



    def host_summary(self):
        """
        Generates Host summary from the JSON data and displays details like hostname, hostId, Health status, Commission state, Roles , Role health etc...
        """
        if str(len(self.host_existence)) != '0':
            print("\n\n\n" + "-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-." + "\n" + '\033[1m' + "        Host Summary          " + '\033[0m' + "\n" + "_._._._._._._._._._._._._._._._._." + "\n\n")
            for i in range(len(self.host_existence)):
                for j in range(len(self.json_data)):
                    if self.host_existence[i] in self.json_data[j]['hostname']:
                        print("\n" + "+ Hostname : " + self.json_data[j]['hostname'] + "\n" + "+ Host ID : " + self.json_data[j]['hostId'] + "\n" + "+ Host IP : " + str(self.host_ip[i]))
                        # self.host_existence.append(self.json_data[j]['hostname'])
                        self.host_Id.append(self.json_data[j]['hostId'])
                        cluster_url = requests.get((self.hosts_url + "/hosts/" + self.json_data[j]['hostId']), auth=(self.user, self.passwd))
                        self.cluster_json_data = cluster_url.json()
                        try:
                            for k in range(len(self.cluster_json_data['clusterRef'])):
                                try:
                                    if not self.cluster_json_data['roleRefs']:
                                        print("+ Cluster : " + self.cluster_json_data['clusterRef']['clusterName'] + "\n\t" + "============================\n- Overall Health : " + self.cluster_json_data['healthSummary'] + "\n\t" + "- Maintenance Mode : " + str(self.cluster_json_data['maintenanceMode']) + "\n\t" + "- Commission State : " + self.cluster_json_data['commissionState'] + "\n==========================================\n\n")
                                        print("\n" + "[X] Roles in " + self.host_array[i] + ": " + '\033[1m' + "No Roles" + '\033[0m')
                                    if self.cluster_json_data['roleRefs']:
                                        print("+ Cluster : " + self.cluster_json_data['roleRefs'][k]['clusterName'])
                                        print("============================\n" + "+ Overall Health : " + self.cluster_json_data['healthSummary'] + "  [✓]\n\t" + "- Maintenance Mode : " + str(self.cluster_json_data['maintenanceMode']) + "  [✓]\n\t" + "- Commission State : " + self.cluster_json_data['commissionState'] + "  [✓]\n==========================================\n\n" + "[X] Roles in " + self.cluster_json_data['hostname'] + " (Role Count:" + str(len(self.cluster_json_data['roleRefs'])) + ")" + "\n")
                                    for li in range(len(self.cluster_json_data['roleRefs'])):
                                        roles_url = requests.get((self.hosts_url + "/clusters/" + str(
                                            self.cluster_json_data['roleRefs'][li]['clusterName']) + "/services/" + str(
                                            self.cluster_json_data['roleRefs'][li]['serviceName']) + "/roles/" + str(
                                            self.cluster_json_data['roleRefs'][li]['roleName'])), auth=(self.user, self.passwd))
                                        self.roles_json_data = roles_url.json()
                                        print("\t" + str(li + 1) + ". " + self.cluster_json_data['roleRefs'][li]['roleName'] + '\033[1m' + " - " + self.roles_json_data['type'] + " (RoleState: " + self.roles_json_data['healthSummary'] + ")" + '\033[0m')
                                        li += 1
                                    k += 1
                                    print("\n-----------------------------------------\n")
                                    continue
                                except KeyError:
                                    print("Machine has duplicate instance in cloudera/Not part of any cluster. Investigate")
                        except KeyError:
                            print("Machine has duplicate instance in cloudera/Not part of any cluster. Investigate")
                    j += 1
                i += 1
        self.role_data()

    def role_data(self):
        """
        Segregate machines on the basis of roles like ENDOR, LA, LA_REPLAY, Node Manager and OTHER. This will be used for running sanity checks inside the machines.
        """
        global nm_url
        if str(len(self.host_existence)) != '0':
            endor_url = requests.get((self.hosts_url + "/clusters/int/services/csi_endor/roles/"), auth=(self.user, self.passwd))
            endor_json_data = endor_url.json()['items']
            for i in range(len(self.host_Id)):
                for j in range(len(endor_json_data)):
                    if self.host_Id[i] in endor_json_data[j]['hostRef']['hostId']:
                        if endor_json_data[j]['type'] == "CSI_ENDOR_INDEXER" or endor_json_data[j]['type'] == "CSI_ENDOR_WORKER":
                            for k in range(len(self.json_data)):
                                if self.host_Id[i] in self.json_data[k]['hostId']:
                                    self.endor_host_ID.append(self.host_Id[i])
                                    self.endor_hostname.append(self.json_data[k]['hostname'])
                                k += 1
                    j += 1
                i += 1
        if str(len(self.host_existence)) != '0':
            la_url = requests.get((self.hosts_url + "/clusters/mr/services/csi_log_agent/roles/"), auth=(self.user, self.passwd))
            la_json_data = la_url.json()['items']
            for i in range(len(self.host_Id)):
                for j in range(len(la_json_data)):
                    if self.host_Id[i] in la_json_data[j]['hostRef']['hostId']:
                        if la_json_data[j]['type'] == "CSI_LOG_AGENT" or la_json_data[j]['type'] == "CSI_LOG_AGENT_REPLAY":
                            for k in range(len(self.json_data)):
                                if self.host_Id[i] in self.json_data[k]['hostId']:
                                    self.la_host_ID.append(self.host_Id[i])
                                    self.la_hostname.append(self.json_data[k]['hostname'])
                                k += 1
                    j += 1
                i += 1
        if str(len(self.host_existence)) != '0':
            if self.dc == "sj":
                nm_url = requests.get((self.hosts_url + "/clusters/mr/services/YARN/roles/"),
                                      auth=(self.user, self.passwd))
            if self.dc == "ch":
                nm_url = requests.get((self.hosts_url + "/clusters/mr/services/yarn2/roles/"),
                                      auth=(self.user, self.passwd))
            nm_json_data = nm_url.json()['items']
            for i in range(len(self.host_Id)):
                for j in range(len(nm_json_data)):
                    if self.host_Id[i] in nm_json_data[j]['hostRef']['hostId']:
                        if nm_json_data[j]['type'] == "NODEMANAGER":
                            for k in range(len(self.json_data)):
                                if self.host_Id[i] in self.json_data[k]['hostId']:
                                    self.nm_host_ID.append(self.host_Id[i])
                                    self.nm_hostname.append(self.json_data[k]['hostname'])
                                k += 1
                    j += 1
                i += 1
        if str(len(self.host_existence)) != '0':
            for ip in range(len(self.host_existence)):
                if self.host_existence[ip] not in self.endor_hostname and self.host_existence[ip] not in self.la_hostname and self.host_existence[ip] not in self.nm_hostname:
                    for j in range(len(self.json_data)):
                        if self.host_Id[ip] in self.json_data[j]['hostId']:
                            self.other_INT_host_ID.append(self.host_Id[ip])
                            self.other_INT_hostname.append(self.json_data[j]['hostname'])
                        j += 1
                ip += 1

    def endor_checks(self):
        if self.endor_hostname:
            print("\n" + "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n" + '\033[1m' + "IMPORTANT:: " + "(" + str(
                len(self.endor_hostname)) + ") " + "Endor hosts found, performing additional checks..." + '\033[0m' + "\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
            for hosts in self.endor_hostname:
                s_str = str(hosts).replace("-", ".", 3).replace(".csi.foo.bar", "", 1).replace("a10.", "", 1)
                cmd2 = "config_cmd=" + "'" + "(iptool csi | grep -w " + '"' + str(
                    s_str) + '"' + ")'" + " ; config_output=$(echo ${config_cmd} | ssh -T " + '"' + str(
                    self.lsguser) + "@" + str(self.lsgname) + '"' + "); echo "'"$config_output"'" "
                host_exec = subprocess.Popen(cmd2, shell=True, stdout=subprocess.PIPE, universal_newlines=True)
                for ip in host_exec.stdout:
                    pattern = re.compile(r'(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})')
                    result = pattern.search(ip).group(0)
                    self.endor_ip.append(result)
            if self.endor_hostname:
                print('\033[1m' + "ENDOR Hostnames : " + '\033[0m')
                for hostname in self.endor_hostname:
                    print("\t" + str(hostname))
            if self.endor_ip:
                print('\033[1m' + "ENDOR Host IP : " + '\033[0m')
                for ip in self.endor_ip:
                    print("\t" + str(ip))
        for ip in range(len(self.endor_ip)):
            try:
                print("\n" + '\033[1m' + "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%" + '\033[0m')
                print("\n" + '\033[1m' + "Running Sanity Checks on " + str(self.endor_ip[ip]) + '\033[0m')
                print('\033[1m' + "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%" + '\033[0m')
                cmd1 = "ssh -A -o HostKeyAlgorithms=+ssh-dss " + str(
                    self.lsgname) + " '" + "/usr/local/akamai/bin/gwsh csiop@" + str(self.endor_ip[
                                                                                         ip]) + ' "' + "echo ; echo "'"----------  Uptime ----------"'" ; uptime -p ; echo ; echo "'"---------- Filesystem count ----------"'"  ; df -h | grep -v Filesystem | wc -l ; echo ; echo "'"---------- Mounted Filesystems ----------"'" ; echo;   df -h ; echo ; echo "'"[-] ENDOR Disk utilization"'" ; echo ; df -h  /ghostcache/csi/endor/ramdisk ; echo ; echo "'"[-] Checking Akamai Services"'" ; echo ; /a/sbin/akamai_run check akamai ; echo ; echo "'"[X] File checks"'" ; echo ; test -f /etc/csi/csi-env/conf/env.properties && echo "'"1. Env file exists"'" || echo "'"1. Warning : Env file not found"'"; echo ; test -f /opt/cloudera/parcels/CSI_OPS_PARCEL/meta/scripts/host_health_check/host_healthcheck.py && echo "'"2. PARCELS exists"'" || echo "'"2. Warning : PARCELS Missing"'"; echo ; test -f /a/csi-general/kmi/edgescape/facil.cert.gpg && echo "'"3. KMI exists"'" || echo "'"3. Warning : KMI Missing"'"; echo ;  test -f /a/csi-general/kmi/nat_repository/nat_repository.key && echo "'"4. NAT repo file exists"'" || echo "'"4. Warning : NAT repo file missing"'"; echo ; test -f /a/csi-secrets/ewok/extra-certs/ewok_csi.jks && echo "'"5. EWOK secrets exists"'" || echo "'"5. Warning : EWOK secrets missing"'"; echo ;         "'" '"'"
                exec1 = subprocess.check_output(cmd1, shell=True, universal_newlines=True)
                cmd2 = "ams_cmd=" + "'" + "(ams " + str(
                    self.endor_ip[ip]) + ")'" + " ; output=$(echo ${ams_cmd} | ssh -T " + "'" + str(
                    self.lsguser) + "@" + str(
                    self.lsgname) + "'" + ") ; echo " + "'" + "[-] Active alerts for the machine " + str(
                    self.endor_ip[ip]) + "'" ";echo; echo "'"$output"'" "
                exec2 = subprocess.check_output(cmd2, shell=True, universal_newlines=True)
                cmd3 = "query=" + "'" + "(agg csi \"select data_center, ip_key, feed_key, bytes, megabytes, gigabytes, threshold_value from (SELECT CASE WHEN cm.csiCluster SIMILAR '"'"'"'"'b'"'"'"'"' THEN '"'"'"'"'Chicago'"'"'"'"' WHEN cm.csiCluster SIMILAR '"'"'"'"'c'"'"'"'"' THEN '"'"'"'"'SanJose'"'"'"'"' END data_center, clm.machineip ip_key, substr(clm.key, 43, -42) feed_key, CAST(clm.numval AS INTEGER) bytes, CAST(clm.numval AS INTEGER) / (1024*1024) megabytes, CAST(clm.numval AS INTEGER) / (1024*1024*1024) gigabytes, CAST(clm.numval AS INTEGER) / (1024*1024*1024) threshold_value FROM csi2_la_monitoring clm, csi_cm_machine_types cm WHERE clm.key like '"'"'"'"'com.akamai.csi.type_LogAgent.name_LogType.%.CurrentReadyForProcessingFilesSizeInBytes'"'"'"'"' AND clm.key not in ('"'"'"'"'com.akamai.csi.type_LogAgent.name_LogType.Summary.CurrentReadyForProcessingFilesSizeInBytes'"'"'"'"') AND clm.key != '"'"'"'"'com.akamai.csi.type_LogAgent.name_LogType.Summary.CurrentReadyForProcessingFilesSizeInBytes'"'"'"'"' AND clm.key not like '"'"'"'"'com.akamai.csi.type_LogAgent.name_LogType.%BEHAVIORAL%.CurrentReadyForProcessingFilesSizeInBytes'"'"'"'"' AND clm.key not like '"'"'"'"'com.akamai.csi.type_LogAgent.name_LogType.NEVADA_%.CurrentReadyForProcessingFilesSizeInBytes'"'"'"'"' AND clm.key not like '"'"'"'"'com.akamai.csi.type_LogAgent.name_LogType.ETP%.CurrentReadyForProcessingFilesSizeInBytes'"'"'"'"' AND clm.key not like '"'"'"'"'com.akamai.csi.type_LogAgent.name_LogType.ERROR_RESPONDER_INBOUND%.CurrentReadyForProcessingFilesSizeInBytes'"'"'"'"' AND clm.key not like '"'"'"'"'com.akamai.csi.type_LogAgent.name_LogType.ANSWERX%.CurrentReadyForProcessingFilesSizeInBytes'"'"'"'"' AND clm.key not like '"'"'"'"'com.akamai.csi.type_LogAgent.name_LogType.NOMINUM%.CurrentReadyForProcessingFilesSizeInBytes'"'"'"'"' AND clm.machineip = cm.hostExtIp AND cm.csiCluster NOT IN ( SELECT dc_name FROM csi_noccvariables WHERE category = '"'"'"'"'dc_availability'"'"'"'"' AND availability = '"'"'"'"'FALSE'"'"'"'"' UNION ALL SELECT dc_name FROM csi_noccvariables WHERE category = '"'"'"'"'la_increasing_queue'"'"'"'"' AND availability = '"'"'"'"'FALSE'"'"'"'"')) where CAST(ip_key AS STRING)=" + "'"'"'"'" + str(
                    self.endor_ip[ip]) + "'"'"'"'" + "\"" + ")" "'" + "; output=$(echo ${query} | ssh -T " + "'" + str(
                    self.lsguser) + "@" + str(
                    self.lsgname) + "'" + ") ; echo ;echo " + "'" + "[-] LogAgent NRT Queue on the machine " + str(
                    self.endor_ip[ip]) + "'" ";echo; echo "'"$output"'" "
                exec3 = subprocess.check_output(cmd3, shell=True, universal_newlines=True)
                cmd4 = "malt_cmd=" + "'" + "(malt " + str(
                    self.endor_ip[ip]) + ")'" + " ; output=$(echo ${malt_cmd} | ssh -T " + "'" + str(
                    self.lsguser) + "@" + str(
                    self.lsgname) + "'" + ") ; echo " + "'" + "------------------- NOCC Tickets for the machine " + str(
                    self.endor_ip[ip]) + " -------------------'" ";echo; echo "'"$output"'" "
                exec4 = subprocess.check_output(cmd4, shell=True, universal_newlines=True)
                print(exec1 + "\n" + exec2 + "\n" + exec3 + "\n" + exec4)
                ip += 1
                continue
            except subprocess.CalledProcessError:
                print("Unsshable Machine")

    def la_checks(self):
        if self.la_hostname:
            print("\n" + "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n" + '\033[1m' + "IMPORTANT:: " + "(" + str(
                len(self.la_hostname)) + ") " + "LogAgent hosts found, performing additional checks..." + '\033[0m' + "\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
            for hosts in self.la_hostname:
                s_str = str(hosts).replace("-", ".", 3).replace(".csi.foo.bar", "", 1).replace("a10.", "", 1)
                cmd2 = "config_cmd=" + "'" + "(iptool csi | grep -w " + '"' + str(
                    s_str) + '"' + ")'" + " ; config_output=$(echo ${config_cmd} | ssh -T " + '"' + str(
                    self.lsguser) + "@" + str(self.lsgname) + '"' + "); echo "'"$config_output"'" "
                host_exec = subprocess.Popen(cmd2, shell=True, stdout=subprocess.PIPE, universal_newlines=True)
                for ip in host_exec.stdout:
                    pattern = re.compile(r'(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})')
                    result = pattern.search(ip).group(0)
                    self.la_ip.append(result)
            if self.la_hostname:
                print('\033[1m' + "LogAgent Hostnames : " + '\033[0m')
                for hostname in self.la_hostname:
                    print("\t" + str(hostname))
            if self.la_ip:
                print('\033[1m' + "LogAgent Host IP : " + '\033[0m')
                for ip in self.la_ip:
                    print("\t" + str(ip))
        for ip in range(len(self.la_ip)):
            try:
                print("\n" + '\033[1m' + "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%" + '\033[0m')
                print("\n" + '\033[1m' + "Running Sanity Checks on " + str(self.la_ip[ip]) + '\033[0m')
                print('\033[1m' + "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%" + '\033[0m')
                cmd1 = "ssh -A -o HostKeyAlgorithms=+ssh-dss " + str(
                    self.lsgname) + " '" + "/usr/local/akamai/bin/gwsh csiop@" + str(self.la_ip[
                                                                                         ip]) + ' "' + "echo ; echo "'"[-] Uptime"'" ; uptime -p ; echo ; echo "'"[-] Filesystem count"'"  ; df -h | grep -v Filesystem | wc -l ; echo ; echo "'"[-] Mounted Filesystems"'" ;echo;  df -h ; echo ; echo "'"[-] LogAgent Disk utilization"'";echo; df -h  /ghostcache/csi/logagent/ramdisk ; echo ; echo "'"[-] Checking Akamai Services"'" ; echo; /a/sbin/akamai_run check akamai ; echo ; echo "'"[X] File checks"'" ; echo ; test -f /etc/csi/csi-env/conf/env.properties && echo "'"1. Env file exists"'" || echo "'"1. Warning : Env file not found"'"; echo ; test -f /opt/cloudera/parcels/CSI_OPS_PARCEL/meta/scripts/host_health_check/host_healthcheck.py && echo "'"2. PARCELS exists"'" || echo "'"2. Warning : PARCELS Missing"'"; echo ; test -f /a/csi-general/kmi/edgescape/facil.cert.gpg && echo "'"3. KMI exists"'" || echo "'"3. Warning : KMI Missing"'"; echo ;  test -f /a/csi-general/kmi/nat_repository/nat_repository.key && echo "'"4. NAT repo file exists"'" || echo "'"4. Warning : NAT repo file missing"'"; echo ; test -f /a/csi-secrets/ewok/extra-certs/ewok_csi.jks && echo "'"5. EWOK secrets exists"'" || echo "'"5. Warning : EWOK secrets missing"'"; echo ;         "'" '"'"
                exec1 = subprocess.check_output(cmd1, shell=True, universal_newlines=True)
                cmd2 = "ams_cmd=" + "'" + "(ams " + str(
                    self.la_ip[ip]) + ")'" + " ; output=$(echo ${ams_cmd} | ssh -T " + "'" + str(
                    self.lsguser) + "@" + str(
                    self.lsgname) + "'" + ") ; echo " + "'" + "[-] Active alerts for the machine " + str(
                    self.la_ip[ip]) + "'" ";echo; echo "'"$output"'" "
                exec2 = subprocess.check_output(cmd2, shell=True, universal_newlines=True)
                cmd3 = "query=" + "'" + "(agg csi \"select data_center, ip_key, feed_key, bytes, megabytes, gigabytes, threshold_value from (SELECT CASE WHEN cm.csiCluster SIMILAR '"'"'"'"'b'"'"'"'"' THEN '"'"'"'"'Chicago'"'"'"'"' WHEN cm.csiCluster SIMILAR '"'"'"'"'c'"'"'"'"' THEN '"'"'"'"'SanJose'"'"'"'"' END data_center, clm.machineip ip_key, substr(clm.key, 43, -42) feed_key, CAST(clm.numval AS INTEGER) bytes, CAST(clm.numval AS INTEGER) / (1024*1024) megabytes, CAST(clm.numval AS INTEGER) / (1024*1024*1024) gigabytes, CAST(clm.numval AS INTEGER) / (1024*1024*1024) threshold_value FROM csi2_la_monitoring clm, csi_cm_machine_types cm WHERE clm.key like '"'"'"'"'com.akamai.csi.type_LogAgent.name_LogType.%.CurrentReadyForProcessingFilesSizeInBytes'"'"'"'"' AND clm.key not in ('"'"'"'"'com.akamai.csi.type_LogAgent.name_LogType.Summary.CurrentReadyForProcessingFilesSizeInBytes'"'"'"'"') AND clm.key != '"'"'"'"'com.akamai.csi.type_LogAgent.name_LogType.Summary.CurrentReadyForProcessingFilesSizeInBytes'"'"'"'"' AND clm.key not like '"'"'"'"'com.akamai.csi.type_LogAgent.name_LogType.%BEHAVIORAL%.CurrentReadyForProcessingFilesSizeInBytes'"'"'"'"' AND clm.key not like '"'"'"'"'com.akamai.csi.type_LogAgent.name_LogType.NEVADA_%.CurrentReadyForProcessingFilesSizeInBytes'"'"'"'"' AND clm.key not like '"'"'"'"'com.akamai.csi.type_LogAgent.name_LogType.ETP%.CurrentReadyForProcessingFilesSizeInBytes'"'"'"'"' AND clm.key not like '"'"'"'"'com.akamai.csi.type_LogAgent.name_LogType.ERROR_RESPONDER_INBOUND%.CurrentReadyForProcessingFilesSizeInBytes'"'"'"'"' AND clm.key not like '"'"'"'"'com.akamai.csi.type_LogAgent.name_LogType.ANSWERX%.CurrentReadyForProcessingFilesSizeInBytes'"'"'"'"' AND clm.key not like '"'"'"'"'com.akamai.csi.type_LogAgent.name_LogType.NOMINUM%.CurrentReadyForProcessingFilesSizeInBytes'"'"'"'"' AND clm.machineip = cm.hostExtIp AND cm.csiCluster NOT IN ( SELECT dc_name FROM csi_noccvariables WHERE category = '"'"'"'"'dc_availability'"'"'"'"' AND availability = '"'"'"'"'FALSE'"'"'"'"' UNION ALL SELECT dc_name FROM csi_noccvariables WHERE category = '"'"'"'"'la_increasing_queue'"'"'"'"' AND availability = '"'"'"'"'FALSE'"'"'"'"')) where CAST(ip_key AS STRING)=" + "'"'"'"'" + str(
                    self.la_ip[ip]) + "'"'"'"'" + "\"" + ")" "'" + "; output=$(echo ${query} | ssh -T " + "'" + str(
                    self.lsguser) + "@" + str(
                    self.lsgname) + "'" + ") ; echo ;echo " + "'" + "[-] LogAgent Queue on the machine " + str(
                    self.la_ip[ip]) + "'" ";echo; echo "'"$output"'" "
                exec3 = subprocess.check_output(cmd3, shell=True, universal_newlines=True)
                cmd4 = "malt_cmd=" + "'" + "(malt " + str(
                    self.la_ip[ip]) + ")'" + " ; output=$(echo ${malt_cmd} | ssh -T " + "'" + str(
                    self.lsguser) + "@" + str(
                    self.lsgname) + "'" + ") ; echo " + "'" + "------------------- NOCC Tickets for the machine " + str(
                    self.la_ip[ip]) + " -------------------'" ";echo; echo "'"$output"'" "
                exec4 = subprocess.check_output(cmd4, shell=True, universal_newlines=True)
                print(exec1 + "\n" + exec2 + "\n" + exec3 + "\n" + exec4)
                ip += 1
                continue
            except subprocess.CalledProcessError:
                print("Unsshable Machine")

    def nm_checks(self):
        if self.nm_hostname:
            print("\n" + "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n" + '\033[1m' + "IMPORTANT:: " + "(" + str(
                len(self.nm_hostname)) + ") " + "Nodemanager  hosts found, performing additional checks..." + '\033[0m' + "\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
            for hosts in self.nm_hostname:
                s_str = str(hosts).replace("-", ".", 3).replace(".csi.foo.bar", "", 1).replace("a10.", "", 1)
                cmd2 = "config_cmd=" + "'" + "(iptool csi | grep -w " + '"' + str(
                    s_str) + '"' + ")'" + " ; config_output=$(echo ${config_cmd} | ssh -T " + '"' + str(
                    self.lsguser) + "@" + str(self.lsgname) + '"' + "); echo "'"$config_output"'" "
                host_exec = subprocess.Popen(cmd2, shell=True, stdout=subprocess.PIPE, universal_newlines=True)
                for ip in host_exec.stdout:
                    pattern = re.compile(r'(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})')
                    result = pattern.search(ip).group(0)
                    self.nm_ip.append(result)
            if self.nm_hostname:
                print('\033[1m' + "NodeManager Hostnames : " + '\033[0m')
                for hostname in self.nm_hostname:
                    print("\t" + str(hostname))
            if self.nm_ip:
                print('\033[1m' + "NodeManager Host IP : " + '\033[0m')
                for ip in self.nm_ip:
                    print("\t" + str(ip))
        for ip in range(len(self.nm_ip)):
            try:
                print("\n" + '\033[1m' + "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%" + '\033[0m')
                print('\033[1m' + "Running Sanity Checks on " + str(self.nm_ip[ip]) + '\033[0m')
                print('\033[1m' + "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%" + '\033[0m')
                cmd1 = "ssh -A -o HostKeyAlgorithms=+ssh-dss " + str(
                    self.lsgname) + " '" + "/usr/local/akamai/bin/gwsh csiop@" + str(self.nm_ip[ip]) + ' "' + "echo ; echo "'"---------- Uptime ----------"'" ;echo; uptime -p ; echo ; echo "'"---------- Filesystem count ----------"'" ;echo; df -h | grep -v Filesystem | wc -l ; echo ; echo "'"---------- Mounted Filesystems ----------"'" ;echo;  df -h ; echo ; echo "'"---------- Checking edgescape cron ---------- "'";echo; grep -q edgescape-data-distributor /etc/crontab && echo "'"**INFO :: Edgescape Cron exists"'" || echo "'"**Warning :: Edgescape Cron Missing !!!"'" ; echo ; echo "'"---------- Edgescape Data ----------"'" ; echo ; ls -l /ghostcache/csi/csi-hdfs-facilitator/download/{e.company.v6.tree,e.domain.v6.tree,e.espro.v6.tree,e.proxy.v6.tree}; echo ;echo "'"---------- Checking Akamai Services ----------"'" ; echo; /a/sbin/akamai_run check akamai ; echo ; echo "'"------------------- File checks -------------------"'" ; echo ; test -f /etc/csi/csi-env/conf/env.properties && echo "'"+    1. Env file exists"'" || echo "'"+    1. Warning : Env file not found"'"; echo ; test -f /opt/cloudera/parcels/CSI_OPS_PARCEL/meta/scripts/host_health_check/host_healthcheck.py && echo "'"+    2. PARCELS exists"'" || echo "'"+    2. Warning : PARCELS Missing"'"; echo ; test -f /a/csi-general/kmi/edgescape/facil.cert.gpg && echo "'"+    3. KMI exists"'" || echo "'"+    3. Warning : KMI Missing"'"; echo ;  test -f /a/csi-general/kmi/nat_repository/nat_repository.key && echo "'"+    4. NAT repo file exists"'" || echo "'"+    4. Warning : NAT repo file missing"'"; echo ; test -f /a/csi-secrets/ewok/extra-certs/ewok_csi.jks && echo "'"+    5. EWOK secrets exists"'" || echo "'"+    5. Warning : EWOK secrets missing"'"; echo ;         "'" '"'"
                exec1 = subprocess.check_output(cmd1, shell=True, universal_newlines=True)
                cmd2 = "ams_cmd=" + "'" + "(ams " + str(self.nm_ip[ip]) + ")'" + " ; output=$(echo ${ams_cmd} | ssh -T " + "'" + str(self.lsguser) + "@" + str(self.lsgname) + "'" + ") ; echo " + "'" + "------------------- Active alerts for the machine " + str(self.nm_ip[ip]) + " -------------------'" ";echo; echo "'"$output"'" "
                exec2 = subprocess.check_output(cmd2, shell=True, universal_newlines=True)
                cmd3 = "malt_cmd=" + "'" + "(malt " + str(self.nm_ip[ip]) + ")'" + " ; output=$(echo ${malt_cmd} | ssh -T " + "'" + str(self.lsguser) + "@" + str(self.lsgname) + "'" + ") ; echo " + "'" + "------------------- NOCC Tickets for the machine " + str(self.nm_ip[ip]) + " -------------------'" ";echo; echo "'"$output"'" "
                exec3 = subprocess.check_output(cmd3, shell=True, universal_newlines=True)
                print(exec1 + "\n" + exec2 + "\n" + exec3)
                ip += 1
                continue
            except subprocess.CalledProcessError:
                print("Unsshable Machine")

    def other_role_checks(self):
        if self.other_INT_hostname:
            print("\n" + '\033[1m' + "IMPORTANT:: " + "(" + str(
                len(self.other_INT_hostname)) + ") " + "Machines with roles other than" + " '" + "ENDOR and LogAgent" + "'" + "found in " + str(
                self.dc) + "," + " performing additional checks..." + '\033[0m' + "\n")
            for hosts in self.other_INT_hostname:
                s_str = str(hosts).replace("-", ".", 3).replace(".csi.foo.bar", "", 1).replace("a10.", "", 1)
                cmd2 = "config_cmd=" + "'" + "(iptool csi | grep -w " + '"' + str(
                    s_str) + '"' + ")'" + " ; config_output=$(echo ${config_cmd} | ssh -T " + '"' + str(
                    self.lsguser) + "@" + str(self.lsgname) + '"' + "); echo "'"$config_output"'" "
                host_exec = subprocess.Popen(cmd2, shell=True, stdout=subprocess.PIPE, universal_newlines=True)
                for ip in host_exec.stdout:
                    pattern = re.compile(r'(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})')
                    result = pattern.search(ip).group(0)
                    self.other_INT_ip.append(result)
            if self.other_INT_hostname:
                print('\033[1m' + "Other roles Hostnames : " + '\033[0m')
                for hostname in self.other_INT_hostname:
                    print("\t" + str(hostname))
            if self.other_INT_ip:
                print('\033[1m' + "Other roles Host IP : " + '\033[0m')
                for ip in self.other_INT_ip:
                    print("\t" + str(ip))
        for ip in range(len(self.other_INT_ip)):
            try:
                print("\n" + '\033[1m' + "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%" + '\033[0m')
                print('\033[1m' + "Running Sanity Checks on " + str(self.other_INT_ip[ip]) + '\033[0m')
                print('\033[1m' + "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%" + '\033[0m')
                cmd1 = "ssh -A -o HostKeyAlgorithms=+ssh-dss " + str(self.lsgname) + " '" + "/usr/local/akamai/bin/gwsh csiop@" + str(self.other_INT_ip[ip]) + ' "' + "echo ; echo "'"[-] Uptime"'" ; uptime -p ; echo ; echo "'"[-] Filesystem count"'"  ; df -h | grep -v Filesystem | wc -l ; echo ; echo "'"[-] Mounted Filesystems"'" ; echo;  df -h ; echo ; echo "'"[-] Checking Akamai Services"'" ;echo ; /a/sbin/akamai_run check akamai ; echo ; echo "'"[X] File checks"'"  ; echo ; test -f /etc/csi/csi-env/conf/env.properties && echo "'"1. Env file exists"'" || echo "'"1. Warning : Env file not found"'"; echo ; test -f /opt/cloudera/parcels/CSI_OPS_PARCEL/meta/scripts/host_health_check/host_healthcheck.py && echo "'"2. PARCELS exists"'" || echo "'"2. Warning : PARCELS Missing"'"; echo ; test -f /a/csi-general/kmi/edgescape/facil.cert.gpg && echo "'"\t3. KMI exists"'" || echo "'"3. Warning : KMI Missing"'"; echo ;  test -f /a/csi-general/kmi/nat_repository/nat_repository.key && echo "'"4. NAT repo file exists"'" || echo "'"4. Warning : NAT repo file missing"'"; echo ; test -f /a/csi-secrets/ewok/extra-certs/ewok_csi.jks && echo  "'"5. EWOK secrets exists"'" || echo  "'"5. Warning : EWOK secrets missing"'"; echo ;         "'" '"'"
                exec1 = subprocess.check_output(cmd1, shell=True, universal_newlines=True)
                cmd2 = "ams_cmd=" + "'" + "(ams " + str(
                    self.other_INT_ip[ip]) + ")'" + " ; output=$(echo ${ams_cmd} | ssh -T " + "'" + str(
                    self.lsguser) + "@" + str(
                    self.lsgname) + "'" + ") ; echo " + "'" + "[-] Active alerts for the machine " + str(
                    self.other_INT_ip[ip]) + "'" "; echo ; echo "'"$output"'" "
                exec2 = subprocess.check_output(cmd2, shell=True, universal_newlines=True)
                cmd3 = "malt_cmd=" + "'" + "(malt " + str(
                    self.other_INT_ip[ip]) + ")'" + " ; output=$(echo ${malt_cmd} | ssh -T " + "'" + str(
                    self.lsguser) + "@" + str(
                    self.lsgname) + "'" + ") ; echo " + "'" + "------------------- NOCC Tickets for the machine " + str(
                    self.other_INT_ip[ip]) + " -------------------'" ";echo; echo "'"$output"'" "
                exec3 = subprocess.check_output(cmd3, shell=True, universal_newlines=True)
                print(exec1 + "\n" + exec2 + "\n" + exec3)
                ip += 1
                continue
            except subprocess.CalledProcessError:
                print("Unsshable Machine")


def main():
    args = get_cli_args()
    try:
        host_array = list(dict.fromkeys(str(args.host).replace(',', ' ').replace('{', ' ').replace('}', ' ').split()))
    except AttributeError:
        print("\n\t" + "Usage:" + __file__ + " -h")
        exit()
    run = sanityCheck(args.dc, args.user, args.secret, host_array, args.lsguser, args.lsgname)
    run.dc_map()
    if run.endor_hostname:
        run.endor_checks()
    if run.la_hostname:
        run.la_checks()
    if run.nm_hostname:
        run.nm_checks()
    else:
        run.other_role_checks()


if __name__ == "__main__":
    main()
